package main

/*
	üìå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Ç–æ–≤–æ
		–ö–æ–Ω—Ñ–∏–≥
		–õ–æ–≥
		–ë–¥
			–ò–Ω–∏—Ü–∏–ª–∏–∑–∏—Ä—É–µ–º –±–¥.
				–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–¥, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–µ–º
				–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–µ–º
	üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤. –≥–æ—Ç–æ–≤–æ
	üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤. —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –±–¥?
			–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –±–¥ –ø–æ –≤–µ—Ä—Å–∏–∏. –≥–æ—Ç–æ–≤–æ
	üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ ID.
			–ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ ID –ø–æ –≤–µ—Ä—Å–∏–∏.
	üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –ë–î. –≥–æ—Ç–æ–≤–æ
	üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π.
	üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö.

*/

import (
	"fmt"
	"log"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"

	"dkl.ru/pact/bd_service/iternal/config"
	"dkl.ru/pact/bd_service/iternal/core"
	"dkl.ru/pact/bd_service/iternal/handler"
	"dkl.ru/pact/bd_service/iternal/initialization"
	"dkl.ru/pact/bd_service/iternal/logger"
	"dkl.ru/pact/bd_service/iternal/queue"
)

func main() {
	db, err := initialization.Init()
	qm := queue.NewQueueManager()
	if err != nil {
		panic(err)
	} else {
		logger.Logger.Info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
		logger.Logger.Debug(fmt.Sprintf("%+v", config.Config))
	}

	// üß© –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
	fileHandler := handler.NewFileHandler(db, qm)

	topicHandler := handler.NewTopicHandler(db, qm)

	// üåê –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
	r := chi.NewRouter()
	r.Use(middleware.RequestID)
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)

	// üìÅ –†–æ—É—Ç—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤
	r.Route("/v1", func(r chi.Router) {
		r.Get("/get_queue", func(w http.ResponseWriter, r *http.Request) {
			// –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥—å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
			validationQueue := qm.GetValidationQueue()
			downloadQueue := qm.GetDownloadQueue()

			// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
			response := map[string]interface{}{
				"validation": validationQueue,
				"download":   downloadQueue,
			}

			if err := core.WriteJSONResponse(w, response); err != nil {
				logger.Logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: " + err.Error())
				http.Error(w, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
			}
		})
		r.Post("/clear_queue", func(w http.ResponseWriter, r *http.Request) {
			// –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏
			qm.ClearQueues()
			logger.Logger.Info("–û—á–µ—Ä–µ–¥–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
			w.WriteHeader(http.StatusOK)
			w.Write([]byte("‚úÖ –û—á–µ—Ä–µ–¥–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã"))
		})
	})
	r.Route("/file", func(r chi.Router) {
		r.Post("/", fileHandler.SaveFile)             // ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
		r.Post("/check", fileHandler.CheckFile)       // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
		r.Post("/download", fileHandler.DownloadFile) // ‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
		// r.Get("/list", fileHandler.GetFilesByVersion)    // ‚úÖ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ –≤–µ—Ä—Å–∏–∏
		// r.Get("/meta", fileHandler.GetFileMetaByVersion) // ‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è + ID –ø–æ –≤–µ—Ä—Å–∏–∏
	})

	r.Route("/topic", func(r chi.Router) {
		r.Post("/get_language_topics", topicHandler.GetLanguagesTopics) // todo rename ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ —è–∑—ã–∫—É
	})

	// üîß –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ–∏—á
	// r.Get("/version/new", fileHandler.GetNewVersions)
	// r.Put("/file", fileHandler.UpdateFileInfo)

	// üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
	r.Get("/health", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("‚úÖ OK"))
	})

	// üöÄ –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
	log.Println("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
	if err := http.ListenAndServe(
		fmt.Sprintf("%s:%d", config.Config.Server.Host, config.Config.Server.Port), r); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err)
	}
}
