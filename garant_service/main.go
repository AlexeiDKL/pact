package main

import (
	"fmt"
	"net/http"

	"dkl.ru/pact/garant_service/iternal/config"
	"dkl.ru/pact/garant_service/iternal/garant"
	"dkl.ru/pact/garant_service/iternal/initialization"
	"github.com/go-chi/chi/v5"
)

/*
üìå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –ì–∞—Ä–∞–Ω—Ç–∞.
üìå –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–µ–∫—Å—Ç–∞ —Ñ–∞–π–ª–æ–≤.
üìå –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ì–∞—Ä–∞–Ω—Ç–∞.
üìå –ú–µ—Ö–∞–Ω–∏–∑–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω).
üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "–±–∏—Ç—ã—Ö" —Ñ–∞–π–ª–æ–≤.
*/

func main() {
	err := initialization.Init()
	if err != nil {
		panic(err)
	}

	topic := "70670880"
	err = garant.DownloadODT(topic, "doc.odt")
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err)

		return
	}
	fmt.Println("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ doc.odt")

	r := chi.NewRouter()

	r.Route("/garant", func(r chi.Router) {
		r.Get("/hello", func(w http.ResponseWriter, r *http.Request) {
			w.Write([]byte("Hello, Garant Service!"))
		})
		r.Get("/download", func(w http.ResponseWriter, r *http.Request) {
			err := garant.DownloadODT("70670880", "doc.odt")
			if err != nil {
				http.Error(w, "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: "+err.Error(), http.StatusInternalServerError)
				return
			}
			w.Write([]byte("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ doc.odt"))
		})
	})

	r.Get("/health", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("‚úÖ OK, Garant Service is running!"))
	})

	fmt.Printf("Starting Garant Service on port %s\n", config.Config.Server.Port)
	if err := http.ListenAndServe(fmt.Sprintf("%s:%s", config.Config.Server.Host, config.Config.Server.Port), r); err != nil {
		fmt.Printf("Error starting server: %v\n", err)
		return
	}

}
